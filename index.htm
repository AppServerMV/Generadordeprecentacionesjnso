<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Editor de Presentaciones - AppServerMV</title>
    <style>
        :root {
            --primary-color: #4a6fa5;
            --secondary-color: #6b8cbc;
            --light-color: #f5f7fa;
            --dark-color: #2c3e50;
            --success-color: #28a745;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --border-radius: 8px;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        * { box-sizing: border-box; margin: 0; padding: 0; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
        body { background-color: var(--light-color); color: var(--dark-color); line-height: 1.6; padding: 20px; }
        .container { max-width: 1200px; margin: 0 auto; }
        header { text-align: center; margin-bottom: 30px; padding: 20px; background-color: white; border-radius: var(--border-radius); box-shadow: var(--box-shadow); }
        h1 { color: var(--primary-color); margin-bottom: 10px; }
        .main-content { display: flex; flex-wrap: wrap; gap: 20px; }
        .github-auth-section, .form-section, .preview-section { flex: 1; min-width: 300px; background-color: white; border-radius: var(--border-radius); box-shadow: var(--box-shadow); padding: 20px; }
        .form-group { margin-bottom: 15px; }
        label { display: block; margin-bottom: 5px; font-weight: 600; }
        input, select, textarea { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-size: 16px; }
        textarea { min-height: 100px; resize: vertical; }
        .btn { display: inline-block; background-color: var(--primary-color); color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; transition: background-color 0.3s; margin-right: 10px; margin-bottom: 10px; }
        .btn:hover { background-color: var(--secondary-color); }
        .btn-success { background-color: var(--success-color); }
        .btn-success:hover { background-color: #218838; }
        .btn-warning { background-color: var(--warning-color); color: var(--dark-color); }
        .btn-warning:hover { background-color: #e0a800; }
        .btn-danger { background-color: var(--danger-color); }
        .btn-danger:hover { background-color: #c82333; }
        .presentation-item { border: 1px solid #ddd; border-radius: var(--border-radius); padding: 15px; margin-bottom: 15px; background-color: #f9f9f9; }
        .presentation-item h3 { margin-bottom: 10px; color: var(--primary-color); }
        .presentation-item p { margin-bottom: 5px; }
        .json-output { background-color: #f5f5f5; border: 1px solid #ddd; border-radius: var(--border-radius); padding: 15px; margin-top: 20px; font-family: monospace; white-space: pre-wrap; max-height: 400px; overflow-y: auto; }
        .actions { display: flex; flex-wrap: wrap; gap: 10px; margin-top: 20px; }
        .icon-options { display: flex; flex-wrap: wrap; gap: 10px; margin-top: 5px; }
        .icon-option { font-size: 24px; cursor: pointer; padding: 5px; border: 2px solid transparent; border-radius: 4px; }
        .icon-option.selected { border-color: var(--primary-color); background-color: #e9f0f7; }
        .status-message { padding: 10px; border-radius: 4px; margin-top: 10px; display: none; }
        .status-success { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .status-error { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        .token-info { font-size: 0.9em; color: #666; margin-top: 5px; }
        .repo-details { background-color: #f8f9fa; padding: 15px; border-radius: var(--border-radius); margin-top: 15px; }
        .auto-config { background-color: #e7f3ff; border-left: 4px solid var(--primary-color); padding: 15px; margin-bottom: 20px; }
        .token-guide { background-color: #fff3cd; border-left: 4px solid var(--warning-color); padding: 15px; margin-bottom: 20px; }
        @media (max-width: 768px) { .main-content { flex-direction: column; } }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Editor de Presentaciones - AppServerMV</h1>
            <p>Gestiona tus presentaciones directamente en GitHub</p>
        </header>
        
        <div class="auto-config">
            <h3>‚úÖ Configuraci√≥n Autom√°tica Detectada</h3>
            <p><strong>Repositorio:</strong> AppServerMV/proyectos-app</p>
            <p><strong>Archivo:</strong> presentations.json</p>
            <p>¬°Solo necesitas ingresar tu token de GitHub!</p>
        </div>
        
        <div class="token-guide">
            <h3>üîë Gu√≠a R√°pida para el Token de GitHub</h3>
            <p><strong>Pasos para crear el token correctamente:</strong></p>
            <ol>
                <li>Ve a <a href="https://github.com/settings/tokens" target="_blank">GitHub Settings > Tokens</a></li>
                <li>Haz clic en <strong>"Generate new token"</strong> ‚Üí <strong>"Generate new token (classic)"</strong></li>
                <li>Selecciona estos permisos:
                    <ul>
                        <li>‚úÖ <strong>repo</strong> (todo)</li>
                        <li>‚úÖ <strong>workflow</strong> (opcional)</li>
                    </ul>
                </li>
                <li>Genera el token y c√≥pialo</li>
            </ol>
        </div>
        
        <div class="main-content">
            <section class="github-auth-section">
                <h2>Conexi√≥n con GitHub</h2>
                <div class="form-group">
                    <label for="github-token">Token de acceso personal de GitHub:</label>
                    <input type="password" id="github-token" placeholder="ghp_tuTokenDeGitHub">
                    <div class="token-info">
                        <strong>Importante:</strong> El token debe tener permisos de <strong>repo</strong>.
                        <a href="https://github.com/settings/tokens" target="_blank">Crear token aqu√≠</a>
                    </div>
                </div>
                
                <div class="repo-details">
                    <h3>Configuraci√≥n del Repositorio</h3>
                    <p><strong>Propietario:</strong> AppServerMV</p>
                    <p><strong>Repositorio:</strong> proyectos-app</p>
                    <p><strong>Archivo:</strong> presentations.json</p>
                    <p><strong>Estado:</strong> <span id="connection-status">Desconectado</span></p>
                    <p><strong>SHA actual:</strong> <span id="file-sha">No cargado</span></p>
                    
                    <div class="actions">
                        <button class="btn" id="load-from-github">Cargar desde GitHub</button>
                        <button class="btn btn-success" id="save-to-github">Guardar en GitHub</button>
                        <button class="btn" id="test-connection">Probar Conexi√≥n</button>
                    </div>
                </div>

                <!-- Carga local -->
                <div class="form-group">
                    <label for="local-json">Cargar JSON desde archivo:</label>
                    <input type="file" id="local-json" accept=".json">
                </div>
                
                <div id="status-message" class="status-message"></div>
            </section>
            
            <section class="form-section">
                <h2>Agregar/Editar Presentaci√≥n</h2>
                <form id="presentation-form">
                    <input type="hidden" id="edit-id">
                    
                    <div class="form-group">
                        <label for="title">T√≠tulo:</label>
                        <input type="text" id="title" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="description">Descripci√≥n:</label>
                        <textarea id="description" required></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label for="category">Categor√≠a:</label>
                        <input type="text" id="category" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="url">URL de la presentaci√≥n:</label>
                        <input type="url" id="url" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="embedUrl">URL de embed (opcional):</label>
                        <input type="url" id="embedUrl">
                    </div>
                    
                    <div class="form-group">
                        <label>Icono:</label>
                        <div class="icon-options" id="icon-options">
                            <span class="icon-option" data-icon="üì∫">üì∫</span>
                            <span class="icon-option" data-icon="üíª">üíª</span>
                            <span class="icon-option" data-icon="ü§ñ">ü§ñ</span>
                            <span class="icon-option" data-icon="üìä">üìä</span>
                            <span class="icon-option" data-icon="üîß">üîß</span>
                            <span class="icon-option" data-icon="üì±">üì±</span>
                            <span class="icon-option" data-icon="üåê">üåê</span>
                            <span class="icon-option" data-icon="‚öôÔ∏è">‚öôÔ∏è</span>
                        </div>
                        <input type="text" id="icon" placeholder="O ingresa un emoji personalizado" maxlength="2">
                    </div>
                    
                    <div class="form-group">
                        <label for="date">Fecha:</label>
                        <input type="date" id="date" required>
                    </div>
                    
                    <div class="actions">
                        <button type="submit" class="btn" id="submit-btn">Agregar Presentaci√≥n</button>
                        <button type="button" class="btn btn-warning" id="cancel-edit" style="display: none;">Cancelar Edici√≥n</button>
                    </div>
                </form>
            </section>
            
            <section class="preview-section">
                <h2>Presentaciones</h2>
                <div id="presentations-list">
                    <p>No hay presentaciones cargadas. Haz clic en "Cargar desde GitHub" o carga un archivo local.</p>
                </div>
                
                <h3>JSON Resultante</h3>
                <div class="json-output" id="json-output">
                    {"presentations": []}
                </div>
                
                <div class="actions">
                    <button class="btn" id="copy-json">Copiar JSON</button>
                    <button class="btn btn-success" id="download-json">Descargar JSON</button>
                </div>
            </section>
        </div>
    </div>

    <script>
        let presentations = [];
        let isEditing = false;
        let currentEditId = null;
        let githubToken = '';
        let currentFileSha = '';

        const CONFIG = {
            owner: 'AppServerMV',
            repo: 'proyectos-app',
            filePath: 'presentations.json'
        };

        window.editPresentation = function(id) {
            const presentation = presentations.find(p => p.id === id);
            if (!presentation) return;

            document.getElementById('edit-id').value = presentation.id;
            document.getElementById('title').value = presentation.title;
            document.getElementById('description').value = presentation.description;
            document.getElementById('category').value = presentation.category;
            document.getElementById('url').value = presentation.url;
            document.getElementById('embedUrl').value = presentation.embedUrl || '';
            document.getElementById('icon').value = presentation.icon;
            document.getElementById('date').value = presentation.date;

            document.querySelectorAll('.icon-option').forEach(opt => {
                opt.classList.remove('selected');
                if (opt.getAttribute('data-icon') === presentation.icon) {
                    opt.classList.add('selected');
                }
            });

            isEditing = true;
            currentEditId = id;
            document.getElementById('submit-btn').textContent = 'Actualizar Presentaci√≥n';
            document.getElementById('cancel-edit').style.display = 'inline-block';
            showStatus('Editando presentaci√≥n. Haz los cambios y presiona "Actualizar Presentaci√≥n"', 'success');
        };

        window.deletePresentation = function(id) {
            if (confirm('¬øEst√°s seguro de que quieres eliminar esta presentaci√≥n?')) {
                presentations = presentations.filter(p => p.id !== id);
                renderPresentations();
                updateJsonOutput();
                showStatus('Presentaci√≥n eliminada correctamente', 'success');
            }
        };

        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('date').valueAsDate = new Date();
            setupIconOptions();

            document.getElementById('presentation-form').addEventListener('submit', function(e) {
                e.preventDefault();
                if (isEditing) updatePresentation();
                else addPresentation();
            });

            document.getElementById('load-from-github').addEventListener('click', loadFromGitHub);
            document.getElementById('save-to-github').addEventListener('click', saveToGitHub);
            document.getElementById('test-connection').addEventListener('click', testConnection);
            document.getElementById('copy-json').addEventListener('click', copyJsonToClipboard);
            document.getElementById('download-json').addEventListener('click', downloadJson);
            document.getElementById('cancel-edit').addEventListener('click', cancelEdit);

            document.getElementById('local-json').addEventListener('change', function(e) {
                const file = e.target.files[0];
                if (!file) return;

                const reader = new FileReader();
                reader.onload = function(event) {
                    try {
                        const jsonData = JSON.parse(event.target.result);
                        if (!jsonData.presentations || !Array.isArray(jsonData.presentations)) {
                            showStatus('El JSON no tiene la estructura esperada', 'error');
                            return;
                        }
                        presentations = jsonData.presentations;
                        renderPresentations();
                        updateJsonOutput();
                        showStatus('Archivo JSON cargado correctamente', 'success');
                    } catch (err) {
                        showStatus('Error al leer el archivo JSON: ' + err.message, 'error');
                    }
                };
                reader.readAsText(file, 'UTF-8'); // UTF-8 para tildes y √±
            });

            loadSavedToken();
        });

        async function testConnection() {
            githubToken = document.getElementById('github-token').value;
            if (!githubToken) { showStatus('Por favor, ingresa tu token de GitHub', 'error'); return; }

            try {
                showStatus('Probando conexi√≥n con GitHub...', 'success');
                const repoResponse = await fetch(`https://api.github.com/repos/${CONFIG.owner}/${CONFIG.repo}`, {
                    headers: { 'Authorization': `token ${githubToken}`, 'Accept': 'application/vnd.github.v3+json' }
                });

                if (!repoResponse.ok) throw new Error(`Error ${repoResponse.status}: ${repoResponse.statusText}`);
                document.getElementById('connection-status').textContent = 'Conectado ‚úì';
                document.getElementById('connection-status').style.color = 'green';
                showStatus('‚úÖ Conexi√≥n exitosa con GitHub', 'success');
            } catch (error) {
                document.getElementById('connection-status').textContent = 'Error de conexi√≥n';
                document.getElementById('connection-status').style.color = 'red';
                showStatus(`‚ùå Error de conexi√≥n: ${error.message}`, 'error');
            }
        }

        function loadSavedToken() {
            const savedToken = localStorage.getItem('githubToken');
            if (savedToken) { document.getElementById('github-token').value = savedToken; githubToken = savedToken; }
        }

        function saveToken() { localStorage.setItem('githubToken', githubToken); }

        function setupIconOptions() {
            const iconOptions = document.querySelectorAll('.icon-option');
            iconOptions.forEach(option => {
                option.addEventListener('click', function() {
                    iconOptions.forEach(opt => opt.classList.remove('selected'));
                    this.classList.add('selected');
                    document.getElementById('icon').value = this.getAttribute('data-icon');
                });
            });
        }

        async function loadFromGitHub() {
            githubToken = document.getElementById('github-token').value;
            if (!githubToken) { showStatus('Por favor, ingresa tu token de GitHub', 'error'); return; }

            try {
                showStatus('Cargando archivo desde GitHub...', 'success');
                saveToken();
                const fileResponse = await fetch(`https://api.github.com/repos/${CONFIG.owner}/${CONFIG.repo}/contents/${CONFIG.filePath}`, {
                    headers: { 'Authorization': `token ${githubToken}`, 'Accept': 'application/vnd.github.v3+json' }
                });

                if (!fileResponse.ok) throw new Error(`Error ${fileResponse.status}: ${fileResponse.statusText}`);
                const data = await fileResponse.json();
                const decodedContent = decodeURIComponent(escape(atob(data.content)));
                const jsonData = JSON.parse(decodedContent);

                if (!jsonData.presentations || !Array.isArray(jsonData.presentations)) {
                    showStatus('El JSON de GitHub no tiene la estructura esperada', 'error');
                    return;
                }

                presentations = jsonData.presentations;
                currentFileSha = data.sha;
                document.getElementById('file-sha').textContent = currentFileSha;
                renderPresentations();
                updateJsonOutput();
                showStatus('Archivo cargado correctamente desde GitHub', 'success');
            } catch (err) { showStatus(`Error al cargar desde GitHub: ${err.message}`, 'error'); }
        }

        async function saveToGitHub() {
            githubToken = document.getElementById('github-token').value;
            if (!githubToken) { showStatus('Por favor, ingresa tu token de GitHub', 'error'); return; }

            const jsonString = JSON.stringify({ presentations }, null, 2);
            const contentBase64 = btoa(unescape(encodeURIComponent(jsonString)));

            try {
                const response = await fetch(`https://api.github.com/repos/${CONFIG.owner}/${CONFIG.repo}/contents/${CONFIG.filePath}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `token ${githubToken}`,
                        'Accept': 'application/vnd.github.v3+json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        message: 'Actualizaci√≥n de presentaciones desde AppServerMV',
                        content: contentBase64,
                        sha: currentFileSha
                    })
                });

                if (!response.ok) throw new Error(`Error ${response.status}: ${response.statusText}`);
                const result = await response.json();
                currentFileSha = result.content.sha;
                document.getElementById('file-sha').textContent = currentFileSha;
                showStatus('Archivo guardado correctamente en GitHub', 'success');
            } catch (err) { showStatus(`Error al guardar en GitHub: ${err.message}`, 'error'); }
        }

        function renderPresentations() {
            const listContainer = document.getElementById('presentations-list');
            if (presentations.length === 0) {
                listContainer.innerHTML = '<p>No hay presentaciones cargadas.</p>';
                return;
            }

            listContainer.innerHTML = '';
            presentations.forEach(p => {
                const div = document.createElement('div');
                div.className = 'presentation-item';
                div.innerHTML = `
                    <h3>${p.icon || ''} ${p.title}</h3>
                    <p><strong>Descripci√≥n:</strong> ${p.description}</p>
                    <p><strong>Categor√≠a:</strong> ${p.category}</p>
                    <p><strong>Fecha:</strong> ${p.date}</p>
                    <p><strong>URL:</strong> <a href="${p.url}" target="_blank">${p.url}</a></p>
                    ${p.embedUrl ? `<p><strong>Embed:</strong> <a href="${p.embedUrl}" target="_blank">${p.embedUrl}</a></p>` : ''}
                    <button class="btn btn-warning" onclick="editPresentation('${p.id}')">Editar</button>
                    <button class="btn btn-danger" onclick="deletePresentation('${p.id}')">Eliminar</button>
                `;
                listContainer.appendChild(div);
            });
        }

        function updateJsonOutput() {
            document.getElementById('json-output').textContent = JSON.stringify({ presentations }, null, 2);
        }

        function showStatus(message, type) {
            const statusEl = document.getElementById('status-message');
            statusEl.textContent = message;
            statusEl.className = `status-message ${type === 'success' ? 'status-success' : 'status-error'}`;
            statusEl.style.display = 'block';
            setTimeout(() => { statusEl.style.display = 'none'; }, 5000);
        }

        function addPresentation() {
            const newPresentation = {
                id: Date.now().toString(),
                title: document.getElementById('title').value,
                description: document.getElementById('description').value,
                category: document.getElementById('category').value,
                url: document.getElementById('url').value,
                embedUrl: document.getElementById('embedUrl').value,
                icon: document.getElementById('icon').value,
                date: document.getElementById('date').value
            };
            presentations.push(newPresentation);
            renderPresentations();
            updateJsonOutput();
            document.getElementById('presentation-form').reset();
            document.getElementById('date').valueAsDate = new Date();
            showStatus('Presentaci√≥n agregada correctamente', 'success');
        }

        function updatePresentation() {
            const id = currentEditId;
            presentations = presentations.map(p => {
                if (p.id === id) {
                    return {
                        ...p,
                        title: document.getElementById('title').value,
                        description: document.getElementById('description').value,
                        category: document.getElementById('category').value,
                        url: document.getElementById('url').value,
                        embedUrl: document.getElementById('embedUrl').value,
                        icon: document.getElementById('icon').value,
                        date: document.getElementById('date').value
                    };
                }
                return p;
            });
            renderPresentations();
            updateJsonOutput();
            cancelEdit();
            showStatus('Presentaci√≥n actualizada correctamente', 'success');
        }

        function cancelEdit() {
            isEditing = false;
            currentEditId = null;
            document.getElementById('presentation-form').reset();
            document.getElementById('submit-btn').textContent = 'Agregar Presentaci√≥n';
            document.getElementById('cancel-edit').style.display = 'none';
            document.getElementById('date').valueAsDate = new Date();
        }

        function copyJsonToClipboard() {
            const jsonOutput = document.getElementById('json-output');
            navigator.clipboard.writeText(jsonOutput.textContent)
                .then(() => showStatus('JSON copiado al portapapeles', 'success'))
                .catch(() => showStatus('Error al copiar JSON', 'error'));
        }

        function downloadJson() {
            const jsonString = JSON.stringify({ presentations }, null, 2);
            const blob = new Blob([jsonString], { type: 'application/json;charset=utf-8' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'presentations.json';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            showStatus('JSON descargado correctamente', 'success');
        }
    </script>
</body>
</html>
